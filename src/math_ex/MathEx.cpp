/*=============================================================================
  Copyright (c) 2010-2015 Bolero MURAKAMI
  https://github.com/bolero-MURAKAMI/KTL

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/
#include "Config.hpp"

#include <sprig/external/tp_stub.hpp>
#include <sprig/external/ncbind/ncbind.hpp>
#include <sprig/krkr/tjs.hpp>
#include <sprig/krkr/macro.hpp>
#include <sprig/krkr/ncb.hpp>
#include <ktl/config.hpp>
#include <ktl/information.hpp>

#include "MathEx.hpp"

namespace ktl {
	//
	// CreateNativeClassMathEx
	//
#define TJS_NATIVE_CLASSID_NAME MathExClassID
	SPRIG_KRKR_BEGIN_CREATE_NATIVE_CLASS(CreateNativeClassMathEx, MathEx, MathEx)
	//
	//	SUMMARY: 数値系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(bernoulliB2n)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::bernoulliB2n(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(bernoulliB2n);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tangentT2n)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tangentT2n(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tangentT2n);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(prime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::prime(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(prime);
	//
	//	SUMMARY: 算術系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(abs)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::abs(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(abs);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ceil)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ceil(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ceil);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(floor)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::floor(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(floor);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sqrt)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sqrt(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sqrt);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cbrt)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cbrt(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cbrt);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sqrt1Pm1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sqrt1Pm1(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sqrt1Pm1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(hypot)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::hypot(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(hypot);
	//
	//	SUMMARY: 浮動小数点数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(round)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::round(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(round);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(trunc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::trunc(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(trunc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(modf)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::modf(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(modf);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(fpart)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::fpart(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(fpart);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ldexp)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ldexp(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ldexp);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(frexp)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::frexp(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(frexp);
	//
	//	SUMMARY: 浮動小数点数比較系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(equals)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::equals(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(equals);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(notEquals)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::notEquals(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(notEquals);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(less)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::less(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(less);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(greater)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::greater(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(greater);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(lessEqual)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::lessEqual(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(lessEqual);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(greaterEqual)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::greaterEqual(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(greaterEqual);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(compare)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::compare(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(compare);
	//
	//	SUMMARY: 三角関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sin)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sin(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sin);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cos)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cos(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cos);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tan)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tan(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tan);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(asin)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::asin(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(asin);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(acos)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::acos(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(acos);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(atan)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::atan(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(atan);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(atan2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::atan2(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(atan2);
	//
	//	SUMMARY: 双曲線関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sinh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sinh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sinh);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cosh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cosh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cosh);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tanh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tanh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tanh);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(asinh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::asinh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(asinh);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(acosh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::acosh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(acosh);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(atanh)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::atanh(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(atanh);
	//
	//	SUMMARY: 指数対数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(pow)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::pow(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(pow);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(exp)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::exp(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(exp);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(pow10)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::pow10(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(pow10);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(pow2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::pow2(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(pow2);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(log)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(log);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ln)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ln);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(log10)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log10(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(log10);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(lc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log10(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(lc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(log2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log2(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(log2);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(lg)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log2(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(lg);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(logN)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::logN(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(logN);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(powm1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::powm1(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(powm1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(expm1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::expm1(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(expm1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(log1P)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::log1P(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(log1P);
	//
	//	SUMMARY: ガンマ関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tgamma)
	{
		SPRIG_KRKR_NUMPARAMS_EASY_CHECK(1);
		if (numparams >= 2) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(1, 2);
			SPRIG_KRKR_RESULT_SET(
				MathEx::tgamma(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::tgamma(SPRIG_KRKR_ARG_VARIANT(0))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tgamma);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tgamma1Pm1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tgamma1Pm1(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tgamma1Pm1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(lgamma)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::lgamma(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(lgamma);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(digamma)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::digamma(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(digamma);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(trigamma)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::trigamma(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(trigamma);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(polygamma)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::polygamma(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(polygamma);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tgammaRatio)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tgammaRatio(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tgammaRatio);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tgammaDeltaRatio)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tgammaDeltaRatio(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tgammaDeltaRatio);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaP)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaP(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaP);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaQ)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaQ(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaQ);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(tgammaLower)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::tgammaLower(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(tgammaLower);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaPInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaPInv(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaPInv);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaQInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaQInv(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaQInv);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaPInva)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaPInva(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaPInva);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaQInva)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaQInva(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaQInva);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gammaPDerivative)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gammaPDerivative(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gammaPDerivative);
	//
	//	SUMMARY: ベータ関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(beta)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		if (numparams >= 3) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(2, 3);
			SPRIG_KRKR_RESULT_SET(
				MathEx::beta(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::beta(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(beta);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibeta)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibeta(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibeta);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetac)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetac(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetac);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(betac)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::betac(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(betac);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetaInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetaInv(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetaInv);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetacInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetacInv(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetacInv);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetaInva)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetaInva(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetaInva);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetacInva)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetacInva(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetacInva);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetaInvb)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetaInvb(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetaInvb);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetacInvb)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetacInvb(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetacInvb);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ibetaDerivative)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ibetaDerivative(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ibetaDerivative);
	//
	//	SUMMARY:誤差関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(erf)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::erf(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(erf);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(erfc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::erfc(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(erfc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(erfInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::erfInv(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(erfInv);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(erfcInv)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::erfcInv(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(erfcInv);
	//
	//	SUMMARY:ルジャンドル多項式系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(legendreP)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		if (numparams >= 3) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(2, 3);
			SPRIG_KRKR_RESULT_SET(
				MathEx::legendreP(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::legendreP(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(legendreP);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(legendreQ)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::legendreQ(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(legendreQ);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(legendreNext)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		if (numparams >= 5) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(4, 5);
			SPRIG_KRKR_RESULT_SET(
				MathEx::legendreNext(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3), SPRIG_KRKR_ARG_VARIANT(4))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::legendreNext(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(legendreNext);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(laguerre)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		if (numparams >= 3) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(2, 3);
			SPRIG_KRKR_RESULT_SET(
				MathEx::laguerre(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::laguerre(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(laguerre);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(laguerreNext)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		if (numparams >= 5) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(4, 5);
			SPRIG_KRKR_RESULT_SET(
				MathEx::laguerreNext(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3), SPRIG_KRKR_ARG_VARIANT(4))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::laguerreNext(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(laguerreNext);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(hermite)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::hermite(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(hermite);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(hermiteNext)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		SPRIG_KRKR_RESULT_SET(
			MathEx::hermiteNext(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(hermiteNext);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphericalHarmonic)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphericalHarmonic(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphericalHarmonic);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphericalHarmonicR)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphericalHarmonicR(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphericalHarmonicR);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphericalHarmonicI)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphericalHarmonicI(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphericalHarmonicI);
	//
	//	SUMMARY: ベッセル関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselJ)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselJ(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselJ);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylNeumann)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylNeumann(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylNeumann);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselJZero)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselJZero(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselJZero);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylNeumannZero)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylNeumannZero(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylNeumannZero);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselI)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselI(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselI);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselK)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselK(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselK);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphBessel)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphBessel(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphBessel);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphNeumann)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphNeumann(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphNeumann);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselJPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselJPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselJPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylNeumannPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylNeumannPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylNeumannPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselIPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselIPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselIPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylBesselKPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylBesselKPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylBesselKPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphBesselPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphBesselPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphBesselPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphNeumannPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphNeumannPrime(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphNeumannPrime);
	//
	//	SUMMARY: ハンケル関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylHankel1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylHankel1(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylHankel1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(cylHankel2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::cylHankel2(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(cylHankel2);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphHankel1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphHankel1(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphHankel1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sphHankel2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sphHankel2(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sphHankel2);
	//
	//	SUMMARY: エアリー関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(airyAi)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::airyAi(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(airyAi);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(airyBi)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::airyBi(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(airyBi);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(airyAiPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::airyAiPrime(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(airyAiPrime);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(airyBiPrime)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::airyBiPrime(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(airyBiPrime);
	//
	//	SUMMARY: ゼータ関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(zeta)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::zeta(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(zeta);
	//
	//	SUMMARY: シンク関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sincPi)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sincPi(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sincPi);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(sinhcPi)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::sinhcPi(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(sinhcPi);
	//
	//	SUMMARY: オーウェンのT関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(owensT)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::owensT(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(owensT);
	//
	//	SUMMARY: 楕円積分系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellintRf)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ellintRf(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellintRf);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellintRd)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(3);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ellintRd(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellintRd);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellintRj)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(4);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ellintRj(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2), SPRIG_KRKR_ARG_VARIANT(3))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellintRj);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellintRc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::ellintRc(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellintRc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellint1)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		if (numparams >= 2) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(1, 2);
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint1(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint1(SPRIG_KRKR_ARG_VARIANT(0))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellint1);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellint2)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		if (numparams >= 2) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(1, 2);
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint2(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint2(SPRIG_KRKR_ARG_VARIANT(0))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellint2);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellint3)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		if (numparams >= 3) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(2, 3);
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint3(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1), SPRIG_KRKR_ARG_VARIANT(2))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellint3(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellint3);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(ellintD)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		if (numparams >= 2) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(1, 2);
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellintD(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::ellintD(SPRIG_KRKR_ARG_VARIANT(0))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(ellintD);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiZeta)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiZeta(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiZeta);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(heumanLambda)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::heumanLambda(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(heumanLambda);
	//
	//	SUMMARY: ヤコビの楕円関数系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiElliptic)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiElliptic(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiElliptic);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiCd)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiCd(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiCd);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiCn)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiCn(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiCn);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiCs)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiCs(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiCs);

	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiDc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiDc(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiDc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiDn)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiDn(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiDn);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiDs)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiDs(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiDs);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiNc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiNc(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiNc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiNd)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiNd(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiNd);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiNs)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiNs(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiNs);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiSc)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiSc(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiSc);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiSd)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiSd(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiSd);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(jacobiSn)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::jacobiSn(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(jacobiSn);
	//
	//	SUMMARY: 指数積分系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(expint)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		if (numparams >= 2) {
			SPRIG_KRKR_NUMPARAMS_CHECK_FOR(1, 2);
			SPRIG_KRKR_RESULT_SET(
				MathEx::expint(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
				);
		} else {
			SPRIG_KRKR_RESULT_SET(
				MathEx::expint(SPRIG_KRKR_ARG_VARIANT(0))
				);
		}
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(expint);
	//
	//	SUMMARY: 階乗系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(factorial)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::factorial(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(factorial);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(doubleFactorial)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::doubleFactorial(SPRIG_KRKR_ARG_VARIANT(0))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(doubleFactorial);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(risingFactorial)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::risingFactorial(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(risingFactorial);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(fallingFactorial)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::fallingFactorial(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(fallingFactorial);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(binomialCoefficient)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::binomialCoefficient(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(binomialCoefficient);
	//
	//	SUMMARY: 公倍公約系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(gcd)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::gcd(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(gcd);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(lcm)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(2);
		SPRIG_KRKR_RESULT_SET(
			MathEx::lcm(SPRIG_KRKR_ARG_VARIANT(0), SPRIG_KRKR_ARG_VARIANT(1))
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(lcm);
	//
	//	SUMMARY: 比較系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(min)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::min(numparams, param)
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(min);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(max)
	{
		SPRIG_KRKR_NUMPARAMS_CHECK(1);
		SPRIG_KRKR_RESULT_SET(
			MathEx::max(numparams, param)
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(max);
	//
	//	SUMMARY: ランダム系メソッド
	//
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(random)
	{
		SPRIG_KRKR_RESULT_SET(
			MathEx::random()
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(random);
	SPRIG_KRKR_BEGIN_NATIVE_METHOD_DECL(randomDevice)
	{
		SPRIG_KRKR_RESULT_SET(
			MathEx::randomDevice()
			);
		return TJS_S_OK;
	}
	SPRIG_KRKR_END_NATIVE_METHOD_DECL(randomDevice);
	//
	//	SUMMARY: 定数系プロパティ
	//
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, PI, pi);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, E, e);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, LN10, ln10);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, LN2, ln2);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, LOG10E, log10e);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, LOG2E, log2e);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, SQRT2, sqrt2);
	SPRIG_KRKR_NATIVE_STATIC_PROP_DECL_VARIANT_GETONLY(MathEx, SQRT1_2, sqrt1_2);

	SPRIG_KRKR_END_CREATE_NATIVE_CLASS();
#undef TJS_NATIVE_CLASSID_NAME
}	// namespace ktl

//
// regist_ktl_math_ex
// unregist_ktl_math_ex
//
static void regist_ktl_math_ex() {
	SPRIG_KRKR_SECTION(SPRIG_KRKR_TJS_W("KTL:MathEx:regist"), SPRIG_KRKR_LOG_LEVEL_NOTIFICATION);
	sprig::krkr::tjs::object_type global(::TVPGetScriptDispatch(), false);
	if (global) {
		sprig::krkr::tjs::AddNewMember(global, SPRIG_KRKR_TJS_W("MathEx"), ktl::CreateNativeClassMathEx());
	}
}
static void unregist_ktl_math_ex() {
	SPRIG_KRKR_SECTION(SPRIG_KRKR_TJS_W("KTL:MathEx:unregist"), SPRIG_KRKR_LOG_LEVEL_NOTIFICATION);
	sprig::krkr::tjs::object_type global(::TVPGetScriptDispatch(), false);
	if (global) {
		sprig::krkr::tjs::DeleteMember(global, SPRIG_KRKR_TJS_W("MathEx"));
	}
}
NCB_POST_REGIST_CALLBACK(regist_ktl_math_ex);
NCB_PRE_UNREGIST_CALLBACK(unregist_ktl_math_ex);

//
// information
//
KTL_INFORMATION(SPRIG_KRKR_TJS_W("KTL:MathEx:information"));
